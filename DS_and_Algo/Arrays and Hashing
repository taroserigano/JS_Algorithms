/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
    
    let set = new Set() 

    for(let i=0; i < nums.length; i++){ 
        if(set.has(nums[i])) return true 

        set.add(nums[i])
    }
    return false


};




/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isAnagram = function(s, t) {
    if(t.length !== s.length) return false

    let map = {} 

    for(let c of s) map[c] = (map[c] || 0) + 1 

    for(let c of t) if(!map[c]--) return false 

    return true 

    // return Object.values(map).every(n => n === 0) 

};





/**
 * @param {number[]} nums
 * @return {number[]}
 */
var getConcatenation = function(nums) {

    let len = nums.length 
    let res = new Array(2 * len) 

    for(let i=0 ; i < len; i++){
        res[i] = nums[i] 
        res[i+len] = nums[i] 
    }
    return res
    
};



/**
 * @param {number[]} arr
 * @return {number[]}
 */
var replaceElements = function(arr) {

    let R = -1

    for(let i=arr.length-1; i >= 0; i--){

        [arr[i], R] = [R, Math.max(R, arr[i])]
    }

    return arr
    
};


/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isSubsequence = function(s, t) {

    let L = 0 

    for(let i=0; i < t.length; i++){
        if(s[L] === t[i]) L++ 
    }

    return s.length === L 
    
};


/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLastWord = function(s) {

    let arr = s.trim().split(" ") 

    return arr[arr.length-1].length


};



/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    
    let map = {} 

    for(let i =0; i < nums.length; i++){

        let remain = target - nums[i] 

        if(map[remain]) 
            return [map[remain], i] 

        map[nums[i]] = [i]    

    }

    return [-1, -1]

};


/**
 * @param {string[]} strs
 * @return {string}
 */
var longestCommonPrefix = function(strs) {

    for(let i=0; i < strs[0].length;i++) {    // 1st word at [i] index 
        for(let s of strs){                   // every word 
            if(strs[0][i] !== s[i])
                return s.slice(0, i)
        }
    }

    return strs[0]
    
};







/**
 * @param {string[]} strs
 * @return {string[][]}
 */
var groupAnagrams = function(strs) {
    let map = {} 

    for(let s of strs){
        let sorted = s.split("").sort().join("") 

        map[sorted] ? map[sorted].push(s) : map[sorted] = [s]
    }

    return Object.values(map)
};



/**
 * @param {number} numRows
 * @return {number[][]}
 */
var generate = function(rows) {

    let res = [] 

    for(let i=0; i < rows;i++){

        res[i] = new Array(i+1) 
            res[i][0] = 1 
            res[i][i] = 1 

        for(let j=1; j < i; j++){

            res[i][j] = res[i-1][j-1] + res[i-1][j]
        }

    }
    return res 
    
};







/**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function(nums, val) { 

    let L = 0 

    for(let n of nums){
        if(n !== val) 
            nums[L++] = n 
    }

    return L
    
};



/**
 * @param {string[]} emails
 * @return {number}
 */
var numUniqueEmails = function(emails) {

    return (new Set(emails.map(e => { 
        const[local, domain] = e.split('@')
        return local.split('+').shift().split('.').join('') + '@' + domain 
    }))).size
        



};





/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isIsomorphic = function(s, t) {

    let map1 = {} 
    let map2 = {} 

    for(let i=0; i < s.length; i++){

        if(map1[s[i]] !== map2[t[i]]) return false 

        map1[s[i]] = i
        map2[t[i]] = i
    }

    return true 
    
};


/**
 * @param {number[]} flowerbed
 * @param {number} n
 * @return {boolean}
 */
var canPlaceFlowers = function(f, n) {
    
    for(let i = 0; i < f.length && n !== 0; i++){

        if( f[i-1] !== 1 && 
            f[i] === 0 && 
            f[i+1] !== 1){
                n-- 
                i++ 
            }
    }
    return n === 0 

};










/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {

    nums.sort() 

    return nums[Math.floor(nums.length/2)]
    
    
};








/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var nextGreaterElement = function(nums1, nums2) {

    let res = [] 

    for(let n of nums1){

        let tmp = -1 

        for(let i=nums2.indexOf(n); i < nums2.length;i++){

            if(nums2[i] > n){
                tmp = nums2[i] 
                break
            }

        }
        res.push(tmp)

    }

    return res 

    
};






/**
 * @param {number[]} nums
 * @return {number}
 */
var pivotIndex = function(nums) {

    let sum = nums.reduce((a,b) => a+b) 

    let leftSum = 0 

    for(let i=0; i < nums.length;i++){

        let cur = sum - leftSum - nums[i]

        if(leftSum === cur) return i 

        leftSum += nums[i] 

    }

    return -1

    
};













function NumArray(nums) {
  this.sums = [];
  var sum = 0;
  for (var i = 0; i < nums.length; i++) {
    sum += nums[i];
    this.sums.push(sum);
  }
}

NumArray.prototype.sumRange = function(i, j) {
  return this.sums[j] - (i > 0 ? this.sums[i - 1] : 0);
};












/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {

    let res = [] 

    for(let i=1; i <= nums.length; i++){
        if(!nums.includes(i)) res.push(i)
    }

    return res 





}; 









/**
 * @param {string} text
 * @return {number}
 */
var maxNumberOfBalloons = function(text) {
    const map = { b: 0, a: 0, l: 0, o: 0, n: 0, };

    for(let t of text){
        map[t] += 1 
    }

    return Math.floor(Math.min(map.b, map.a, map.l/2, map.o/2, map.n))


};





/**
pattern = "abba", s = "dog cat cat dog"
 */
var wordPattern = function(pat, s) {

    s = s.split(" ")

    if(s.length !== pat.length) return false 

    let word = {} 
    let char = {} 

    for(let i=0; i < pat.length; i++){
        word[s[i]] = pat[i] 
        char[pat[i]] = s[i] 
    }

    for(let i=0; i < pat.length; i++){
        if(word[s[i]] !== pat[i] || 
        char[pat[i]] !== s[i]) 
        return false 
    }

    return true 


};












var MyHashSet = function() {
    
};

/** 
 * @param {number} key
 * @return {void}
 */
MyHashSet.prototype.add = function(key) {
    this[key] = null 
};

/** 
 * @param {number} key
 * @return {void}
 */
MyHashSet.prototype.remove = function(key) {
    delete this[key]
};

/** 
 * @param {number} key
 * @return {boolean}
 */
MyHashSet.prototype.contains = function(key) {
    return this.hasOwnProperty(key)
    
};

/** 
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */









var MyHashMap = function() {
     this.map = {} 
    
};

/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
MyHashMap.prototype.put = function(key, val) {
    this.map[key] = val 
};

/** 
 * @param {number} key
 * @return {number}
 */
MyHashMap.prototype.get = function(key) {
    return this.map[key] != null ? this.map[key] : -1 
};

/** 
 * @param {number} key
 * @return {void}
 */
MyHashMap.prototype.remove = function(key) {
    delete this.map[key] 
};

/** 
 * Your MyHashMap object will be instantiated and called as such:
 * var obj = new MyHashMap()
 * obj.put(key,value)
 * var param_2 = obj.get(key)
 * obj.remove(key)
 */


















/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortArray = function(nums) {
    if(nums.length < 2) return nums 

    const m = Math.floor(nums.length / 2) 

    const L = nums.slice(0, m) 
    const R = nums.slice(m) 

    return merge(sortArray(L), sortArray(R))

    
};

const merge = (L, R) => { 
    const res = [] 
    let i=0, j=0 

    while(i < L.length && j < R.length){
        if(L[i] <= R[j]) {
            res.push(L[i++])
        } else{ 
            res.push(R[j++])
        }
    }
    return [...res, ...L.slice(i), ...R.slice(j)]


}








/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var topKFrequent = function(nums, k) {

    let map = {}
    let res = [] 
    let i = 0

    nums.forEach( (n) => 
    map[n] = (map[n] || 0) + 1 ) 

    let sorted = Object.entries(map).sort((a,b) => b[1]-a[1]) 

    while(i < k){
        res.push(sorted[i][0])
        i++
    }
    return res


    
};






/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
    let res = new Array(nums.length).fill(1) 

    let pre = 1 

    for (let i=0; i<nums.length; i++) { 
        res[i] *= pre
        pre *= nums[i] 
    }
    pre = 1 

    for (let i=nums.length-1; i>=0; i--) { 
        res[i] *= pre
        pre *= nums[i] 
    }

    return res 




};


        // res = [1] * len(nums) 

        // p = 1 
        // for i in range(len(nums)): 
        //     res[i] *= p 
        //     p *= nums[i] 

        // p = 1 
        // for i in range(len(nums)-1, -1, -1): 
        //     res[i] *= p 
        //     p *= nums[i] 

        // return res         







/**
nums = [100,4,200,1,3,2]
 */
var longestConsecutive = function(nums) {

   let res = 0 
   let set = new Set(nums) 

   for(let n of set){
       if(set.has(n-1)) continue 

        let cur = n 
        let cnt = 1 

        while(set.has(cur+1)){
            cur++ 
            cnt++ 
        }

        res = Math.max(res, cnt)

   }

   return res 



};










/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var sortColors = function(nums) {
    
    const swap = (i, j) => { 
    [nums[i], nums[j]] = [nums[j], nums[i]] 
     } 

     let L = 0, R = nums.length-1 
     let i=0 

     while(i <= R){ 
         const n = nums[i] 

         if(n === 0) {   // move to <== L 
             swap(L, i)
             i++ 
             L++
         } else if(n===2){  // move to ==> R
             swap(i, R)
             R--
         } else{
             i++ 
         }
     }
};






/**
 * Encodes a URL to a shortened URL.
 *
 * @param {string} longUrl
 * @return {string}
 */
let map = new Map();
let url = "http://tinyurl.com/";
var encode = function(longUrl) {
    let key = Date.now().toString();
    map.set(key,longUrl);
    return url + key;
};

/**
 * Decodes a shortened URL to its original URL.
 *
 * @param {string} shortUrl
 * @return {string}
 */
var decode = function(shortUrl) {
    let key = shortUrl.split(url);
    return map.get(key[1]);
};







/**
 * @param {number[][]} wall
 * @return {number}
 */
var leastBricks = function(wall) {

    let max = 0 
    let map = {} 
    for(let w of wall){

        let gap = 0 

        for(let i=0;i<w.length-1;i++){
            gap += w[i]
            map[gap] = (map[gap] || 0) + 1
            max = Math.max(max, map[gap]) 
        }

    }

    return wall.length - max

};









/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    let profit = 0 

    for(let i=1; i<prices.length;i++){
        if(prices[i-1] < prices[i]){
            profit += prices[i] - prices[i-1]
        }
    }
    return profit


    
};








/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var subarraySum = function(nums, k) {

    let map = new Map()
    let res = 0 
    let sum = 0 
    map.set(0,1)

    for(let i=0; i < nums.length;i++){
        sum += nums[i] 
        let diff = sum - k 

        if(map.has(diff)) res += map.get(diff) 

        map.set(sum, (map.get(sum) || 0) +1) 

    }
    return res
    
    
};







/**
Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
 */
/**
 * @param {string} s
 * @return {number}
 */
var countPalindromicSubsequence = function (s) {
    let count = 0;
    let chars = new Set(s);
    for(const char of chars){
        // get L, R of char matching index
        let L = s.indexOf(char), R = s.lastIndexOf(char);
        
        // do L+1 can also add one more dupe "a" like 
        // L L+1          R 
        // 1  2           3
        // a  a  c  c  c  a  => [a,a,a]
        count += new Set(s.slice(L + 1, R)).size;
    }
    return count;
};










/**
s = "]]][[["
 */
var minSwaps = function(s) {
    let stack = [] 

    for(c of s){
        if(c === "[") stack.push(c) 
        else if(stack && c === "]") stack.pop() 
    }

    return stack.length / 2
    
};


const isPalindrome = (str) => {
    for (let i = 0, j = str.length - 1; i < j; i++, j--) {
        if (str[i] !== str[j]) return false;
    }
    return true;
}

function maxProduct(s) {
    function dfs(letterIndex, word1, word2) {
        if (letterIndex > s.length) {
            return isPalindrome(word1) && isPalindrome(word2)
                ? word1.length * word2.length
                : 0;
        }
        
        const char = s[letterIndex];
        const newIndex = letterIndex + 1;
        
        return Math.max(
            dfs(newIndex, word1, word2),
            dfs(newIndex, `${word1}${char}`, word2),
            dfs(newIndex, word1, `${word2}${char}`)
        );
    }
    
    return dfs(0, '', '');
};






/**
 * @param {number[][]} grid
 * @return {number}
 */
var gridGame = function(grid) {

    let top = grid[0].reduce((a,b) => a+b) 
    let bot = 0 
    let res = Infinity 

    for(let i=0; i< grid[0].length; i++){
        top -= grid[0][i] 
        res = Math.min(res, Math.max(top, bot)) 
        bot += grid[1][i]
    }
    return res 
    
};







/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
    let res = [] 
    let map = {} 

    for(let c of p){
        map[c] = (map[c] || 0) + 1 
    }

    let L=0, R=0, count = p.length 

    while(R < s.length){
        
        // deduct this char  
        if(map[s[R]] > 0) count-- 

        // anagram found
        if(count ===0) res.push(L) 

        map[s[R]]-- 
        R++ 

        // window passed p length
        if(R-L+1 > p.length){
            // map[s[L]]:0 means it is still valid 
            if(map[s[L]] >= 0) count++ 
            map[s[L]]++ 
            L++ 
        }



    }
    return res
    
};





/**
hay = "sadbutsad", need = "sad"
    // Time Complexity: O(m*n)
    // Space Complexity: O(1)
 */
var strStr = function(hay, need) {

    for(let i=0; i< hay.length;i++){

        if(hay[i] === need[0]){

            let L = i, R = 0 
        // if the starting point match, loop it 
            while(hay[L] === need[R] && R < need.length){
                L++ 
                R++ 
            if(R === need.length) return i 

            }
        }


    }
    return -1
    

};







/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var wiggleSort = function(nums) {
    
    for(let i=0; i < nums.length; i++){

        if(i % 2 == 0 &&  // 0, 2, 4, 6... 
            nums[i] > nums[i+1]){ // if like [3, 1, .....]
                [nums[i], nums[i+1]] = [nums[i+1], nums[i]]
        }
        else if(i % 2 === 1 &&
                nums[i] < nums[i+1]){
                    [nums[i], nums[i+1]] = [nums[i+1], nums[i]]
                }
    }

    return nums

};







/**
 * @param {number[]} nums
 * @return {string}
 */
var largestNumber = function(nums) {

    nums.sort((a,b) => `${b}${a}` - `${a}${b}`)

    if(nums[0] === 0) return '0' 

    return nums.join('')
    
};














var checkSubarraySum = function(nums, k) {

    let remain = new Map() 
    remain.set(0, -1) 
    let sum = 0 

    for(let i=0; i < nums.length;i++){

        sum += nums[i] 
        sum %= k 

        if(!remain.has(sum)){
            remain.set(sum, i)
        } else if(i - remain.get(sum) > 1){ 
            return true 
        }
    }
    return false
}


// 0. set map(0, -1) to avoid to avoid only ONE letter (non-continuous) 
// 1. keep calculating sum ==> 
// 2. find reminder like: 

// reminder{ 
//     0, -1    // to avoid only ONE letter (non-continuous) 
//     5: 1     // 23 % 6(18) = 5 
//     1: 1     // 25 % 6(24) = 1 
//     5: 1     // 29 % 6(24) = 5 
// }

// if same reminder found, then it means it's possible to deduct that reminder "5" amount 









/**
 * @param {string} s
 * @return {string[]}
 */
var findRepeatedDnaSequences = function(s) {

    let curr = s.slice(0, 10)    // 0 ---> 9 
    let seen = new Set([curr])   
    let res = new Set() 

    for(let L=10; L < s.length; L++){
        curr = curr.slice(1) + s[L]   // move 1 block --> 
        if(seen.has(curr)) res.add(curr) 
        seen.add(curr) 
    }
    return [...res]

    
};







/**
 * @param {number[]} nums
 * @return {boolean}
 */
var checkPossibility = function(nums) {
    let change = 0 

    for(let i=0; i < nums.length;i++){

        if(nums[i] > nums[i+1]){
            if(nums[i-1] > nums[i+1]){ 
                nums[i+1] = nums[i]
            }
            change++
        }

        if(change > 1) return false
    }

    return true



};





/**
 * @param {number[]} nums
 * @return {number}
 */
var firstMissingPositive = function(nums) {

    let map = new Map() 

    for(let i=0; i < nums.length;i++){  // add arr = map 
        map.set(nums[i], i) 
    }

    for(let i=1; i <= nums.length; i++){ // check all from 1 --> nums
        if(!map.has(i)) return i 
    }

    return nums.length+1 


    
};








/**
nums1 = [1,2,3], nums2 = [2,4,6]
 */
var findDifference = function(nums1, nums2) {
     let res1 = new Set(nums1) 
     let res2 = new Set(nums2) 

     nums1.forEach(n => {res2.delete(n)}) 
     nums2.forEach(n => {res1.delete(n)})

     return [[...res1], [...res2]]
    
};










/**
 * @param {number} big
 * @param {number} medium
 * @param {number} small
 */
var ParkingSystem = function(big, medium, small) {
    this.count=[big, medium, small]
    
};

/** 
 * @param {number} carType
 * @return {boolean}
 */
ParkingSystem.prototype.addCar = function(carType) {
    return this.count[carType-1]-- > 0 
};

/** 
 * Your ParkingSystem object will be instantiated and called as such:
 * var obj = new ParkingSystem(big, medium, small)
 * var param_1 = obj.addCar(carType)
 */











/**
 * @param {number[]} nums
 * @return {number}
 */
var zeroFilledSubarray = function(nums) {
    
    let res = 0 
    let cnt = 0 

    for(let i=0; i < nums.length; i++){
        if(nums[i] === 0) { 
            cnt++ 
            res += cnt 
        } else{ 
            cnt = 0 
        }
    }

    return res 

};













/**
 * @param {string} s
 * @return {number}
 */
var partitionString = function(s) {
    
    let set = new Set() 
    let res = 1 

    for(let c of s){
        if(set.has(c)){
            res++ 
            set.clear() 
        }
        set.add(c)
    }
    return res

};
































